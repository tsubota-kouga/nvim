
    #dein
    [[plugins]]
    repo='Shougo/dein.vim'

    [[plugins]]
    repo='Shougo/deoplete.nvim'
    hook_add='''
    let g:deoplete#enable_at_startup=1
    let g:deoplete#omni_patterns={}
    let g:deoplete#auto_complete_delay=0
    let g:deoplete#auto_complete_start_length=1
    imap <expr><tab> pumvisible() ? "\<c-n>" :
    \ neosnippet#expandable_or_jumpable() ?
    \ "\<plug>(neosnippet_expand_or_jump)" : "\<tab>"
    '''

    [[plugins]]
    repo='Shougo/deol.nvim'

    #簡単実行できる
    [[plugins]]
    repo='thinca/vim-quickrun'
    hook_post_update='''
        if !(exists("g:quickrun_config")
            let g:quickrun_config={}
        endif
        let g:quickrun_config["watchdogs_checker/_"]={
            \"outputter/quickfix/open_cmd" : "",
        \}
        let g:quickrun_config={'*':{'hook/time/enable':'1'},}
        '''

    [[plugins]]
    repo='osyo-manga/shabadou.vim'

    #簡単にコメントアウトできる
    [[plugins]]
    repo='tomtom/tcomment_vim'

    #コマンド集
    [[plugins]]
    repo='Shougo/denite.nvim'

    #文字に色をつける
    [[plugins]]
    repo='tomasr/molokai'
    hook_add='''
    if dein#tap('molokai')
        colorscheme molokai
    endif
    set background=dark
    set termguicolors
    set t_Co=256
    syntax enable
    filetype plugin indent on
    "neovimに入った時に読み込む
    au MyAutoCmd VimEnter * nested colorscheme molokai
    '''

    # git
    [[plugins]]
    repo='tpope/vim-fugitive'

    #ステータスラインの表示内容強化
    [[plugins]]
    repo='itchyny/lightline.vim'
    hook_add='''
    function! GitStr() abort
        if len(fugitive#head()) != 0
            return '⭠ ' . fugitive#head()
        else
            return ''
        endif
    endfunction

    let g:lightline = {
                \ 'colorscheme': 'powerline',
                \ 'active': {
                \   'left': [ [ 'mode', 'paste' ],
                \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                \   },
                \   'separator': { 'left': '⮀', 'right': '⮂' },
                \   'subseparator': { 'left': '⮁', 'right': '⮃' },
                \   'component_function': {
                \       'gitbranch': 'GitStr'
                \   },
                \ }
    '''

    #末尾の全角と半角の空白を色付け :FixWhitespace
    [[plugins]]
    repo='bronson/vim-trailing-whitespace'

    #インデントの可視化
    [[plugins]]
    repo='Yggdroot/indentLine'

    #ファイルをツリー構造で表示可能
    [[plugins]]
    repo='scrooloose/nerdtree'

    # 文法チェック
    [[plugins]]
    repo='w0rp/ale'
    hook_add='''
    let g:ale_fix_on_save=1
    let g:ale_lint_on_text_changed='never'
    let g:ale_set_loclist=0
    let g:ale_set_quickfix=1
    let g:ale_completion_enabled=0
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
    let g:ale_linters = {
                \ 'cpp': [],
                \ 'c': [],
                \ 'javac': [],
                \ 'rust': [],
                \ 'vim': ['vint'],
                \ 'lua': [],
                \ 'python': [],
                \ 'nim': [],
                \ 'javascript': []
                \ }
    '''

    #snippets
    [[plugins]]
    repo='Shougo/neosnippet-snippets'

    #filetype
    [[plugins]]
    repo='Shougo/context_filetype.vim'

    # 1回出てきたものをハイライト
    [[plugins]]
    repo='osyo-manga/vim-brightest'

    #<F2>で開きたいであろうファイルを開く
    [[plugins]]
    repo='kana/vim-altr'
    hook_source='''
    nmap <F2> <Plug>(altr-forward)
    '''

    # Basilico
    [[plugins]]
    repo='~/Documents/cpp/Basilico'
    build='bash build.sh'
    hook_add='''
    let g:basilico#tabline_style_sheet =
                \ 'color: #ffffff;
                \ background-color: #444444;
                \ font-weight 8;'
    let g:basilico#ext_tabline = v:true
    let g:basilico#ext_popupmenu = v:false
    '''

    # Basilico GUI Plugins
    [[plugins]]
    repo='~/Documents/cpp/BasilWeb'
    hook_add='''
    let g:basilweb#setting_dict = {}
    let g:basilweb#setting_dict['progressbar_style_sheet'] =
                \ 'QProgressBar
                \ {
                \     max-height: 5px;
                \     border: 1px solid grey;
                \     background-color: #999999;
                \     border-radius: 5px;
                \ }
                \ QProgressBar::chunk
                \ {
                \     background-color: grey;
                \ }'
    let g:basilweb#color_scheme = 'dark'
    nnoremap <silent><C-LeftMouse> :call basilweb#openweb_with_cursor_url()<CR>
    '''

    [[plugins]]
    repo='~/Documents/cpp/RuntimeView'
    hook_add='''
    let g:runtime_view#css_name = 'github-gist'
    '''

    [[plugins]]
    repo='~/Documents/cpp/PDFView'

    #QML
    [[plugins]]
    repo='peterhoeg/vim-qml'

    #jsx
    [[plugins]]
    repo='mxw/vim-jsx'

    [[plugins]]
    repo='autozimu/LanguageClient-neovim'
    rev='next'
    build='./install.sh'
    on_ft=['c', 'cpp', 'nim', 'rust', 'lua', 'java', 'python', 'javascript', 'javascript.jsx']
    hook_add='''
    set hidden
    let g:lsp_dir=expand('~/.cache/lsp_neovim')
    let g:LanguageClient_autoStart = 1
    let g:LanguageClient_serverCommands={}
    let g:LanguageClient_serverCommands['c']=['clangd']
    let g:LanguageClient_serverCommands['cpp']=['clangd']
    let g:LanguageClient_serverCommands['nim']=[g:lsp_dir . '/nim/nimlsp/nimlsp']
    let g:LanguageClient_serverCommands['rust']=['rls']
    let g:LanguageClient_serverCommands['lua']=['lua-lsp']
    let g:LanguageClient_serverCommands['python']=['pyls']
    let g:LanguageClient_serverCommands['javascript']=['node ' . g:lsp_dir . '/jtscript/lib/language-server']
    let g:LanguageClient_serverCommands['javascript.jsx']=['node ' . g:lsp_dir . '/jtscript/lib/language-server']

    let l:jdt_lsp_path=expand(g:lsp_dir) .
                \'/java-lsp'
    let g:LanguageClient_serverCommands['java']=[
                \ 'java',
                \ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044',
                \ '-Declipse.application=org.eclipse.jdt.ls.core.id1',
                \ '-Dosgi.bundles.defaultStartLevel=4',
                \ '-Declipse.product=org.eclipse.jdt.ls.core.product',
                \ '-Dlog.protocol=true',
                \ '-Dlog.level=ALL',
                \ '-noverify',
                \ '-Xmx1G',
                \ '-jar',
                \ expand(l:jdt_lsp_path) . '/plugins/org.eclipse.equinox.launcher_1.5.0.v20180207-1446.jar',
                \ '-configuration',
                \ expand(l:jdt_lsp_path) . '/config_linux',
                \ '-data',
                \ l:jdt_lsp_path . '/jdt_data',
                \ '--add-modules=ALL-SYSTEM',
                \ '--add-opens',
                \ 'java.base/java.util=ALL-UNNAMED',
                \ '--add-opens',
                \ 'java.base/java.lang=ALL-UNNAMED',]

    let g:LanguageClient_diagnosticsDisplay={
    \    1: {
    \        "name": "Error",
    \        "texthl": "ALEError",
    \        "signText": ">>",
    \        "signTexthl": "ALEErrorSign",
    \    },
    \    2: {
    \        "name": "Warning",
    \        "texthl": "ALEWarning",
    \        "signText": "--",
    \        "signTexthl": "ALEWarningSign",
    \    },
    \    3: {
    \        "name": "Information",
    \        "texthl": "ALEInfo",
    \        "signText": "!!",
    \        "signTexthl": "ALEInfoSign",
    \    },
    \    4: {
    \        "name": "Hint",
    \        "texthl": "ALEInfo",
    \        "signText": "!!",
    \        "signTexthl": "ALEInfoSign",
    \    },
    \}
    " set completefunc=g:LanguageClient#complete
    '''

    [[plugins]]
    repo='~/Documents/python/BugHunt.nvim'
    hook_add='''
    nnoremap <A-b> :call bughunt#breakpoint()<CR>
    '''
    [[plugins]]
    repo='~/Documents/python/BugHunt-gdb'
    depends=['BugHunt.nvim']
    hook_add='''
    let g:bughunt#terminal#name_color = '#9AF4FE'
    let g:bughunt#terminal#top_string = ['', '']
    let g:bughunt#terminal#last_string = ['', ' >>> ']
    let g:bughunt#debug_status_win_width = 35
    let g:bughunt#debug_cmd_win_height = 15
    '''
